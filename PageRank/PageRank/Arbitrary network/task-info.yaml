type: edu
custom_name: stage4
files:
- name: tests.py
  visible: false
  text: |
    import numpy as np

    from hstest.stage_test import *

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class Stage4Test(StageTest):
        def generate(self) -> List[TestCase]:
            return [
                TestCase(
                    stdin="3 0.15\n0.333 0.000 0.500\n0.333 1.000 0.000\n0.333 0.000 0.500",
                    attach=("Doesn't return correct result on a network of 3 nodes.", "32.375 35.231 32.375")
                ),
                TestCase(
                    stdin="10 0.5\n0.100 0.100 0.000 0.100 0.500 0.000 0.500 0.000 0.100 0.000\n0.100 0.100 0.000 0.100 0.000 0.000 0.000 0.000 0.100 0.000\n0.100 0.100 1.000 0.100 0.000 0.000 0.500 0.500 0.100 0.000\n0.100 0.100 0.000 0.100 0.000 0.000 0.000 0.000 0.100 0.000\n0.100 0.100 0.000 0.100 0.500 0.000 0.000 0.000 0.100 0.000\n0.100 0.100 0.000 0.100 0.000 0.500 0.000 0.000 0.100 0.000\n0.100 0.100 0.000 0.100 0.000 0.500 0.000 0.000 0.100 0.000\n0.100 0.100 0.000 0.100 0.000 0.000 0.000 0.500 0.100 1.000\n0.100 0.100 0.000 0.100 0.000 0.000 0.000 0.000 0.100 0.000\n0.100 0.100 0.000 0.100 0.000 0.000 0.000 0.000 0.100 0.000\n",
                    attach=("Doesn't return correct result on a network of 10 nodes.", "10.870 6.522 23.910 6.522 8.696 8.696 8.696 13.044 6.522 6.522")
                ),
                TestCase(
                    stdin="20 0.6\n0.050 0.000 0.000 0.000 0.250 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.050 0.050 0.000 0.050 0.000 0.050 0.050 0.000\n0.050 1.000 1.000 0.000 0.000 0.000 0.000 0.250 0.000 0.000 0.000 0.000 0.050 0.050 0.000 0.050 0.000 0.050 0.050 0.000\n0.050 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.050 0.050 0.000 0.050 0.000 0.050 0.050 0.000\n0.050 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.050 0.050 0.000 0.050 0.000 0.050 0.050 0.000\n0.050 0.000 0.000 0.000 0.000 1.000 0.000 0.000 0.000 0.000 0.000 0.000 0.050 0.050 0.000 0.050 0.000 0.050 0.050 0.000\n0.050 0.000 0.000 1.000 0.250 0.000 0.500 0.000 0.000 0.000 0.000 0.000 0.050 0.050 0.000 0.050 0.000 0.050 0.050 0.000\n0.050 0.000 0.000 0.000 0.000 0.000 0.500 0.000 0.500 0.000 0.000 0.000 0.050 0.050 0.000 0.050 0.000 0.050 0.050 0.000\n0.050 0.000 0.000 0.000 0.250 0.000 0.000 0.250 0.000 0.000 0.333 0.000 0.050 0.050 0.000 0.050 0.000 0.050 0.050 0.000\n0.050 0.000 0.000 0.000 0.000 0.000 0.000 0.250 0.000 0.500 0.000 0.500 0.050 0.050 0.000 0.050 0.000 0.050 0.050 0.000\n0.050 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.050 0.050 0.000 0.050 0.000 0.050 0.050 0.000\n0.050 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.500 0.333 0.000 0.050 0.050 0.000 0.050 0.000 0.050 0.050 0.000\n0.050 0.000 0.000 0.000 0.000 0.000 0.000 0.250 0.500 0.000 0.000 0.000 0.050 0.050 0.000 0.050 0.000 0.050 0.050 0.000\n0.050 0.000 0.000 0.000 0.250 0.000 0.000 0.000 0.000 0.000 0.333 0.000 0.050 0.050 0.000 0.050 0.000 0.050 0.050 0.000\n0.050 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.500 0.050 0.050 0.000 0.050 0.000 0.050 0.050 0.000\n0.050 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.050 0.050 0.000 0.050 1.000 0.050 0.050 0.000\n0.050 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.050 0.050 1.000 0.050 0.000 0.050 0.050 0.000\n0.050 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.050 0.050 0.000 0.050 0.000 0.050 0.050 1.000\n0.050 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.050 0.050 0.000 0.050 0.000 0.050 0.050 0.000\n0.050 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.050 0.050 0.000 0.050 0.000 0.050 0.050 0.000\n0.050 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.000 0.050 0.050 0.000 0.050 0.000 0.050 0.050 0.000",
                    attach=("Doesn't return correct result on a network which has more than 10 nodes.", "3.798 12.954 2.725 2.725 7.148 7.369 6.454 5.509 5.973 2.725 4.428 5.344 4.682 4.329 5.342 5.931 4.360 2.725 2.725 2.725")
                )
            ]

        def check(self, reply, attach) -> CheckResult:
            feedback, ans = attach
            true_res = ans.split()
            n = len(true_res)
            res = reply.split()
            if len(res) != n:
                return CheckResult.wrong("Your program should contain a page rank vector of size " + str(n) + ".")
            pr = []
            for i in range(n):
                try:
                    el = float(res[i])
                except ValueError:
                    return CheckResult.wrong("Your program outputted something which is not a number!")
                pr.append(el)
            pr_true = []
            for i in range(n):
                el = float(true_res[i])
                pr_true.append(el)
            eps = 1e-1
            for i in range(n):
                if abs(pr[i] - pr_true[i]) > eps:
                    return CheckResult.wrong(feedback)
            return CheckResult.correct()


    if __name__ == '__main__':
        Stage4Test('pagerank.pagerank').run_tests()
  learner_created: false
- name: pagerank/pagerank.py
  visible: true
  text: |+
    import numpy as np
    import numpy.linalg as la
    import io

    L = np.array([
        [0,   1/2, 1/3, 0, 0,   0,   0],
        [1/3, 0,   0,   0, 1/2, 0,   0],
        [1/3, 1/2, 0,   1, 0,   1/3, 0],
        [1/3, 0,   1/3, 0, 1/2, 1/3, 0],
        [0,   0,   0,   0, 0,   0,   0],
        [0,   0,   1/3, 0, 0,   0,   0],
        [0,   0,   0,   0, 0,   1/3, 1]
    ])

    # damping factor
    d = 0.5
    M = d * L + (1 - d) / len(L) * np.ones((7, 7))

    s = io.StringIO()
    np.savetxt(s, L, fmt="%.3f")
    print(s.getvalue())


    def print_vector(vec):
        for x in vec:
            print(f"{x:.3f}")
        print()


    def power_iteration(A):
        r_prev = 100 * np.ones(len(A)) / len(A)
        norm = 1
        while norm > 0.01:
            r_next = A @ r_prev
            norm = la.norm(r_prev - r_next)
            r_prev = r_next
        print_vector(r_prev)


    def read_matrix(size):
        pass


  learner_created: true
feedback_link: https://hyperskill.org/projects/92/stages/513/implement
status: Solved
record: 4
